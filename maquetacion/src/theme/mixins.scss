// @use "sass:map";
// @use "sass:meta";
// @use "@angular/material" as mat;
// // MIXIN ENCARGADO DE EXPANDIR PALETA DE COLORES EXTRA ( SUCCESS, INFO, WARNING ) PARA QUE SEAN APLICABLES A LOS COMPONENTES.
// $_ripple-opacity: 0.1;
// // Applies a focus style to an mat-button element for each of the supported palettes.
// @mixin _focus-overlay-color($config-or-theme, $variants) {
//   $config: mat.get-color-config($config-or-theme);
//   @each $variant, $variant-palette in $variants {
//     &.mat-#{$variant} .mat-button-focus-overlay .mat-mdc-form-field {
//       background-color: mat.get-color-from-palette($variant-palette);
//     }
//   }
// }
// @mixin _ripple-background($palette, $hue, $opacity) {
//   $background-color: mat.get-color-from-palette($palette, $hue, $opacity);
//   background-color: $background-color;
//   @if (meta.type-of($background-color) != color) {
//     opacity: $opacity;
//   }
// }
// @mixin _ripple-color($theme, $hue, $opacity, $variants) {
//   @each $variant, $variant-palette in $variants {
//     &.mat-#{$variant} .mat-ripple-element .mat-mdc-form-field {
//       @include _ripple-background($variant-palette, $hue, $opacity);
//     }
//   }
// }
// // Applies a property to an mat-button element for each of the supported palettes.
// @mixin _theme-property($theme, $property, $hue, $variants) {
//   $background: map.get($theme, background);
//   $foreground: map.get($theme, foreground);
//   @each $variant, $variant-palette in $variants {
//     &.mat-#{$variant} {
//       #{$property}: mat.get-color-from-palette($variant-palette, $hue);
//     }
//     &.mat-#{$variant} {
//       &.mat-button-disabled {
//         $palette: if($property == "color", $foreground, $background);
//         #{$property}: mat.get-color-from-palette($palette, disabled-button);
//       }
//     }
//   }
// }
// @mixin color($config-or-theme, $variants) {
//   $config: mat.get-color-config($config-or-theme);
//   $foreground: map.get($config, foreground);
//   $background: map.get($config, background);
//   .mat-mdc-button,
//   .mat-mdc-outlined-button,
//   .mat-mdc-icon-button,
//   .mat-mdc-fab,
//   .mat-mdc-mini-fab,
//   .mat-badge.mat-badge,
//   .mat-mdc-stroked-button,
//   .mdc-fab--extended,
//   .mat-mdc-extended-fab {
//     @include _theme-property($config, "color", text, $variants);
//     @include _focus-overlay-color($config, $variants);
//   }
//   .mat-mdc-raised-button,
//   .mat-mdc-unelevated-button.mat-mdc-button-base,
//   .mat-mdc-fab,
//   .mat-mdc-mini-fab,
//   .mat-badge.mat-badge,
//   .mat-mdc-standard-chip.mat-mdc-chip-selected,
//   .mdc-fab--extended,
//   .mat-mdc-extended-fab {
//     @include _theme-property($config, "color", default-contrast, $variants);
//     @include _theme-property($config, "background-color", default, $variants);
//     @include _ripple-color(
//       $config,
//       default-contrast,
//       $_ripple-opacity,
//       $variants
//     );
//   }
// }
// // MIXIN DEFINICION DE PROPIEDADES PARA DIFERENTES VARIANTES DEL COMPONENTE AVATAR
// @mixin avatarVariantes($width, $height, $borderRadius) {
//   display: flex;
//   align-items: center;
//   justify-content: center;
//   color: white;
//   background-color: #d8dae5;
//   box-shadow: none;
//   width: $width;
//   height: $height;
//   border-radius: $borderRadius;
//   font-size: 1.3rem;
//   font-weight: 400;
// } ;
@use "sass:map";
@use "sass:meta";
@use "@angular/material" as mat;
$_ripple-opacity: 0.1;
// Applies a focus style to an mat-button element for each of the supported palettes.
@mixin _focus-overlay-color($config-or-theme, $variants) {
  $config: mat.get-color-config($config-or-theme);
  @each $variant, $variant-palette in $variants {
    &.mat-#{$variant} .mat-button-focus-overlay .mat-mdc-form-field {
      background-color: mat.get-color-from-palette($variant-palette);
    }
  }
}
@mixin _ripple-background($palette, $hue, $opacity) {
  $background-color: mat.get-color-from-palette($palette, $hue, $opacity);
  background-color: $background-color;
  @if (meta.type-of($background-color) != color) {
    opacity: $opacity;
  }
}
@mixin _ripple-color($theme, $hue, $opacity, $variants) {
  @each $variant, $variant-palette in $variants {
    &.mat-#{$variant} .mat-ripple-element .mat-mdc-form-field {
      @include _ripple-background($variant-palette, $hue, $opacity);
    }
  }
}
// Applies a property to an mat-button element for each of the supported palettes.
@mixin _theme-property($theme, $property, $hue, $variants) {
  $background: map.get($theme, background);
  $foreground: map.get($theme, foreground);
  @each $variant, $variant-palette in $variants {
    &.mat-#{$variant}:not(:disabled) {
      #{$property}: mat.get-color-from-palette($variant-palette, $hue);
      &.stroked {
        border: 1px solid mat.get-color-from-palette($variant-palette, $hue);
        background-color: transparent;
        .mat-mdc-chip-action-label {
          color: mat.get-color-from-palette($variant-palette, $hue);
        }
      }
      --mat-mdc-button-persistent-ripple-color: mat.get-color-from-palette(
        $variant-palette,
        $hue
      );
    }
    &.mat-#{$variant} {
      &.mat-button-disabled {
        $palette: if($property == "color", $foreground, $background);
        #{$property}: mat.get-color-from-palette($palette, disabled-button);
      }
    }
  }
}
@mixin color($config-or-theme, $variants) {
  $config: mat.get-color-config($config-or-theme);
  $foreground: map.get($config, foreground);
  $background: map.get($config, background);
  .mat-mdc-button,
  .mat-mdc-outlined-button,
  .mat-mdc-icon-button {
    @include _theme-property($config, "color", text, $variants);
    @include _focus-overlay-color($config, $variants);
  }
  .mat-mdc-raised-button,
  .mat-mdc-unelevated-button.mat-mdc-button-base,
  .mat-mdc-fab,
  .mat-mdc-mini-fab,
  .mat-badge.mat-badge,
  .mat-mdc-standard-chip.mat-mdc-chip-selected {
    @include _theme-property($config, "color", default-contrast, $variants);
    @include _theme-property($config, "background-color", default, $variants);
    @include _ripple-color(
      $config,
      default-contrast,
      $_ripple-opacity,
      $variants
    );
  }
}
// Define valores de width,height y font-size
@mixin icon-size($tamaño, $font-size) {
  width: $tamaño;
  height: $tamaño;
  font-size: $font-size;
}